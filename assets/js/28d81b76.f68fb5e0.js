"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[257],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(r),m=n,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return r?a.createElement(f,i(i({ref:t},d),{},{components:r})):a.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:n,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},430:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:1},i="Overview of pyMusicMeta",c={unversionedId:"music-meta/advanced/extra-a",id:"music-meta/advanced/extra-a",title:"Overview of pyMusicMeta",description:"To facilitate the reuse of Music Meta and its data conversion into OWL/RDF Knowledge Graph, we developed a library to map arbitrary music metadata into RDF triples.",source:"@site/docs/music-meta/advanced/extra-a.md",sourceDirName:"music-meta/advanced",slug:"/music-meta/advanced/extra-a",permalink:"/ontology-network/docs/music-meta/advanced/extra-a",draft:!1,editUrl:"ahttps://github.com/polifonia-project/ontology-network/tree/main/website/docs/music-meta/advanced/extra-a.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced guide",permalink:"/ontology-network/docs/category/advanced-guide"},next:{title:"Contributing to Music Meta",permalink:"/ontology-network/docs/music-meta/advanced/extra-b"}},s={},l=[],d={toc:l},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"overview-of-pymusicmeta"},"Overview of pyMusicMeta"),(0,n.kt)("p",null,"To facilitate the reuse of Music Meta and its data conversion into OWL/RDF Knowledge Graph, we developed a library to map arbitrary music metadata into RDF triples.\nThis enables a practical and scalable workflow for data lifting to create Music Knowledge Graphs without expert knowledge of our ontological model.\nThe library is developed in Python as an extension of ",(0,n.kt)("a",{parentName:"p",href:"https://rdflib.readthedocs.io/en/stable/"},"RDF-Lib"),"."),(0,n.kt)("p",null,"The Music Meta library allows for the creation of RDF triples from textual data, offering the advantage of easy data generation using our model.\nThe library provides a range of simple methods for adding triples to a graph, using clear, concise documentation and straightforward naming conventions.\nWith each triple added, the library automatically adds alignments to other schema that Music Meta supports, thus bringing interoperability with ontologies."))}u.isMDXComponent=!0}}]);