"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[882],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),f=o,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||n;return r?a.createElement(m,i(i({ref:t},p),{},{components:r})):a.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<n;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4073:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var a=r(7462),o=(r(7294),r(3905));const n={sidebar_position:1},i="Overview of pyMusicMeta",l={unversionedId:"tutorial-extras/extra-a",id:"tutorial-extras/extra-a",title:"Overview of pyMusicMeta",description:"To facilitate the reuse of Music Meta and its data conversion into OWL/RDF Knowledge Graph, we developed a library to map arbitrary music metadata into RDF triples.",source:"@site/docs/tutorial-extras/extra-a.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/extra-a",permalink:"/ontology-network/docs/tutorial-extras/extra-a",draft:!1,editUrl:"ahttps://github.com/polifonia-project/ontology-network/tree/main/website/docs/tutorial-extras/extra-a.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Extras",permalink:"/ontology-network/docs/category/tutorial---extras"},next:{title:"Contributing to Music Meta",permalink:"/ontology-network/docs/tutorial-extras/extra-b"}},s={},c=[],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"overview-of-pymusicmeta"},"Overview of pyMusicMeta"),(0,o.kt)("p",null,"To facilitate the reuse of Music Meta and its data conversion into OWL/RDF Knowledge Graph, we developed a library to map arbitrary music metadata into RDF triples.\nThis enables a practical and scalable workflow for data lifting to create Music Knowledge Graphs without expert knowledge of our ontological model.\nThe library is developed in Python as an extension of ",(0,o.kt)("a",{parentName:"p",href:"https://rdflib.readthedocs.io/en/stable/"},"RDF-Lib"),"."),(0,o.kt)("p",null,"The Music Meta library allows for the creation of RDF triples from textual data, offering the advantage of easy data generation using our model.\nThe library provides a range of simple methods for adding triples to a graph, using clear, concise documentation and straightforward naming conventions.\nWith each triple added, the library automatically adds alignments to other schema that Music Meta supports, thus bringing interoperability with ontologies."))}d.isMDXComponent=!0}}]);