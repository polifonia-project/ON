"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[193],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,b=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(b,o(o({ref:t},p),{},{components:r})):n.createElement(b,o({ref:t},p))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},85:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="Create an Artist",s={unversionedId:"tutorial-basics/create-an-artist",id:"tutorial-basics/create-an-artist",title:"Create an Artist",description:"To represent music creatives the class mmMusician), ensembles (mmMusicAlgorithm), as illustrated in the diagram below.",source:"@site/docs/tutorial-basics/create-an-artist.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create-an-artist",permalink:"/ontology-network/docs/tutorial-basics/create-an-artist",draft:!1,editUrl:"ahttps://github.com/polifonia-project/ontology-network/tree/main/website/docs/tutorial-basics/create-an-artist.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Notation primer",permalink:"/ontology-network/docs/tutorial-basics/diagrams_howto"},next:{title:"Create a Music Entity",permalink:"/ontology-network/docs/tutorial-basics/create-music"}},c={},l=[],p={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-an-artist"},"Create an Artist"),(0,a.kt)("p",null,"To represent music creatives the class ",(0,a.kt)("inlineCode",{parentName:"p"},"mm:MusicArtist")," generalises over musicians (",(0,a.kt)("inlineCode",{parentName:"p"},"mm:Musician"),"), ensembles (",(0,a.kt)("inlineCode",{parentName:"p"},"mm:MusicEnsemble"),"), and computational methods (",(0,a.kt)("inlineCode",{parentName:"p"},"mm:MusicAlgorithm"),"), as illustrated in the diagram below.\nMusicians are seen as a specialisation of persons who can optionally be associated to a medium of performance (e.g. voice, guitar), and be part of a music ensemble (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"MusicGroup"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Orchestra"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Choir"),").\nDepending on the data available, the latter can be expressed either through a membership relationship (",(0,a.kt)("inlineCode",{parentName:"p"},"core:isMemberOf"),"), a specialisation of the former, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"mm:isSingerOf"),", or through a ",(0,a.kt)("inlineCode",{parentName:"p"},"mm:MusicEnsembleMembership")," when the period of participation of the musician is available."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://polifonia-project.github.io/music-meta-ontology/assets/images/artist-3fb4f934b34f078b92cabd8c88095a53.png",alt:"Example banner"})),(0,a.kt)("p",null,"All music artists can be associated to (one or more) ",(0,a.kt)("inlineCode",{parentName:"p"},"mm:MusicGenre"),"(s), express influences or collaborations, and share a period of activity.\nHere, the start date refers to the foundation for music ensembles, whereas the end date is used for discontinued projects for algorithms."))}u.isMDXComponent=!0}}]);